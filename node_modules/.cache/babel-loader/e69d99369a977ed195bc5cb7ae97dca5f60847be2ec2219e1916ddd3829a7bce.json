{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\peter\\\\OneDrive\\\\idk\\\\Dokumenty\\\\Multimedia\\\\src\\\\components\\\\MainPageComponents\\\\Second\\\\PopUpContent\\\\PopUpContent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './PopUpContent.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopUpContent = () => {\n  _s();\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [filledBlanks, setFilledBlanks] = useState({});\n  const [matchingSelections, setMatchingSelections] = useState({});\n  const [checkResult, setCheckResult] = useState(null);\n  const [selectedLeft, setSelectedLeft] = useState(null);\n  const [selectedRight, setSelectedRight] = useState(null);\n  const [userSelections, setUserSelections] = useState({});\n  const originalPairs = [{\n    left: \"Diegetic Sound\",\n    right: \"Dialogue within a scene\"\n  }, {\n    left: \"Non-Diegetic Sound\",\n    right: \"Narrator's commentary\"\n  }, {\n    left: \"Ambient Sound\",\n    right: \"Background city noise\"\n  }, {\n    left: \"Foley\",\n    right: \"Artificially created sounds, like footsteps\"\n  }, {\n    left: \"Sound Effects (SFX)\",\n    right: \"Gunshots, explosions\"\n  }, {\n    left: \"Background Music\",\n    right: \"Music score enhancing mood\"\n  }, {\n    left: \"Direct Sound\",\n    right: \"Sounds captured by the primary microphone\"\n  }];\n  const theorySlides = [{\n    type: \"Theory\",\n    title: \"Introduction to Video Editing Software\",\n    content: \"Learn about different types of video editing software, their interfaces, and key features...\"\n  }, {\n    type: \"Theory\",\n    title: \"Basic Editing Techniques\",\n    content: \"Explore the fundamentals of cutting, trimming, and sequencing clips to tell a story...\"\n  }, {\n    type: \"Theory\",\n    title: \"Sound Design in Video Editing\",\n    content: \"Understand the importance of sound, how to add soundtracks, and balance audio in your edits...\"\n  }, {\n    type: \"Theory\",\n    title: \"Color Correction and Grading\",\n    content: \"Discover how to enhance your video's look with color correction and grading...\"\n  }\n  // Add more theory slides as needed\n  ];\n\n  const practicalSlides = [{\n    type: \"Practical\",\n    title: \"Video Software Features Quiz\",\n    content: \"Test your knowledge on different video editing software features.\",\n    exercise: {\n      type: \"multiple-choice\",\n      questions: [\n      // Sample question\n      {\n        question: \"Which software uses a Magnetic Timeline?\",\n        options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\"],\n        correctAnswer: \"Final Cut Pro\"\n      }\n      // Add more questions\n      ]\n    }\n  }, {\n    type: \"Practical\",\n    title: \"Fill in the Blanks\",\n    content: \"Drag the correct terms into the blanks.\",\n    exercise: {\n      type: \"drag-and-drop\",\n      text: [\"The editing software \", \"____\", \" is known for its \", \"____\", \".\"],\n      blanks: {\n        blank1: \"Adobe Premiere Pro\",\n        blank2: \"Magnetic Timeline\"\n      },\n      options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\", \"Magnetic Timeline\", \"Color Correction\"]\n    }\n  }, {\n    type: \"Practical\",\n    title: \"Sound Design Challenge\",\n    content: \"Match the sound type with its correct example.\",\n    exercise: {\n      type: \"matching\",\n      pairs: originalPairs // Use the originalPairs array here\n    }\n  }];\n\n  const conclusionSlide = {\n    type: \"Conclusion\",\n    title: \"Summary of Key Concepts\",\n    content: \"Recap of the key points covered in the course, emphasizing the importance of storytelling, technical skills, and creativity in video editing.\"\n  };\n  const slides = [...theorySlides, ...practicalSlides, conclusionSlide];\n  const goToNextSlide = () => {\n    setCurrentSlide(currentSlide + 1);\n    setSelectedOption(null);\n  };\n  const goToPreviousSlide = () => {\n    setCurrentSlide(currentSlide - 1);\n    setSelectedOption(null);\n  };\n  const handleMultipleChoiceSelection = (question, option) => {\n    setSelectedAnswers(prev => ({\n      ...prev,\n      [question]: option\n    }));\n  };\n  const isAnswerCorrect = (question, option) => {\n    const currentExercise = slides[currentSlide].exercise;\n    if (currentExercise.type === \"multiple-choice\") {\n      const correctAnswer = currentExercise.questions.find(q => q.question === question).correctAnswer;\n      return option === correctAnswer;\n    }\n    return false;\n  };\n  const renderMultipleChoiceQuestions = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: exercise.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this), question.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMultipleChoiceSelection(question.question, option),\n          className: selectedAnswers[question.question] === option ? 'selected' : '',\n          children: option\n        }, optIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 29\n        }, this)), selectedAnswers[question.question] && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'correct' : 'incorrect',\n          children: isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'Correct answer!' : 'Incorrect answer.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  };\n  const handleDragStart = (item, fromBlank = false) => {\n    if (fromBlank) {\n      // If dragging from a blank, remove the item from the blank\n      const updatedBlanks = {\n        ...filledBlanks\n      };\n      for (const key in updatedBlanks) {\n        if (updatedBlanks[key] === item) {\n          updatedBlanks[key] = \"____\"; // Reset the blank\n          break;\n        }\n      }\n      setFilledBlanks(updatedBlanks);\n    }\n    setDraggedItem(item);\n  };\n  const handleDrop = blankIndex => {\n    if (draggedItem) {\n      const blankKey = `blank${blankIndex + 1}`; // Adjust index to match key structure\n      setFilledBlanks(prev => ({\n        ...prev,\n        [blankKey]: draggedItem\n      }));\n      setDraggedItem(null);\n    }\n  };\n  const checkAnswers = () => {\n    const currentSlideData = slides[currentSlide];\n    if (currentSlideData.type === \"Practical\" && currentSlideData.exercise.type === \"drag-and-drop\") {\n      let allCorrect = true;\n      for (const blankKey in currentSlideData.exercise.blanks) {\n        if (currentSlideData.exercise.blanks[blankKey] !== filledBlanks[blankKey]) {\n          allCorrect = false;\n          break;\n        }\n      }\n      setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\n    }\n  };\n  const renderDragAndDropExercise = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-text\",\n        children: exercise.text.map((part, index) => part === \"____\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blank\",\n          onDrop: () => handleDrop(index),\n          onDragOver: e => e.preventDefault(),\n          draggable: true,\n          onDragStart: () => handleDragStart(filledBlanks[`blank${index + 1}`], true),\n          children: filledBlanks[`blank${index + 1}`] || part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: exercise.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"draggable-option\",\n          draggable: true,\n          onDragStart: () => handleDragStart(option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkAnswers,\n        className: \"check-answers-btn\",\n        children: \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), checkResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"check-result\",\n        children: checkResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this);\n  };\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const shuffledLeftOptions = shuffleArray(originalPairs.map(pair => pair.left));\n  const shuffledRightOptions = shuffleArray(originalPairs.map(pair => pair.right));\n  const handleMatchSelect = (left, right) => {\n    setMatchingSelections(prev => ({\n      ...prev,\n      [left]: right\n    }));\n  };\n  const checkIfMatchCorrect = () => {\n    let allCorrect = true;\n    for (const [left, right] of Object.entries(userSelections)) {\n      const correctPair = originalPairs.find(pair => pair.left === left && pair.right === right);\n      if (!correctPair) {\n        allCorrect = false;\n        break;\n      }\n    }\n    setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\n  };\n  const handleSelect = (side, option) => {\n    if (side === 'left') {\n      selectedLeftOptions.push(option);\n    } else {\n      selectedRightOptions.push(option);\n    }\n    if (selectedLeftOptions.length > 0 && selectedRightOptions.length > 0) {\n      const leftPairIndex = originalPairs.findIndex(pair => pair.left === selectedLeftOptions.shift());\n      const rightPairIndex = originalPairs.findIndex(pair => pair.right === selectedRightOptions.shift());\n      if (leftPairIndex === rightPairIndex) {\n        // Correct match\n        setMatchingSelections(prev => ({\n          ...prev,\n          [leftPairIndex]: rightPairIndex\n        }));\n      } else {\n        // Incorrect match, clear selected options\n        selectedLeftOptions = [];\n        selectedRightOptions = [];\n      }\n    }\n  };\n  const renderMatchingExercise = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matching-exercise-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-options\",\n        children: shuffledLeftOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelect('left', option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-options\",\n        children: shuffledRightOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelect('right', option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this);\n  };\n  const renderExerciseContent = exercise => {\n    switch (exercise.type) {\n      case 'multiple-choice':\n        return renderMultipleChoiceQuestions(exercise);\n      case 'drag-and-drop':\n        return renderDragAndDropExercise(exercise);\n      case 'matching':\n        return renderMatchingExercise(exercise);\n      default:\n        return null;\n    }\n  };\n  const renderSlideContent = () => {\n    const slide = slides[currentSlide];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: slide.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this), slide.type === 'Practical' && renderExerciseContent(slide.exercise)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: slides[currentSlide].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }, this), renderSlideContent(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPreviousSlide,\n        disabled: currentSlide === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextSlide,\n        disabled: currentSlide === slides.length - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 9\n  }, this);\n};\n_s(PopUpContent, \"2cj0oaYxCKnMpyoQSxXnA3awi8g=\");\n_c = PopUpContent;\nexport default PopUpContent;\nvar _c;\n$RefreshReg$(_c, \"PopUpContent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PopUpContent","_s","currentSlide","setCurrentSlide","selectedOption","setSelectedOption","selectedAnswers","setSelectedAnswers","draggedItem","setDraggedItem","filledBlanks","setFilledBlanks","matchingSelections","setMatchingSelections","checkResult","setCheckResult","selectedLeft","setSelectedLeft","selectedRight","setSelectedRight","userSelections","setUserSelections","originalPairs","left","right","theorySlides","type","title","content","practicalSlides","exercise","questions","question","options","correctAnswer","text","blanks","blank1","blank2","pairs","conclusionSlide","slides","goToNextSlide","goToPreviousSlide","handleMultipleChoiceSelection","option","prev","isAnswerCorrect","currentExercise","find","q","renderMultipleChoiceQuestions","children","map","index","className","fileName","_jsxFileName","lineNumber","columnNumber","optIndex","onClick","handleDragStart","item","fromBlank","updatedBlanks","key","handleDrop","blankIndex","blankKey","checkAnswers","currentSlideData","allCorrect","renderDragAndDropExercise","part","onDrop","onDragOver","e","preventDefault","draggable","onDragStart","shuffleArray","array","i","length","j","Math","floor","random","shuffledLeftOptions","pair","shuffledRightOptions","handleMatchSelect","checkIfMatchCorrect","Object","entries","correctPair","handleSelect","side","selectedLeftOptions","push","selectedRightOptions","leftPairIndex","findIndex","shift","rightPairIndex","renderMatchingExercise","renderExerciseContent","renderSlideContent","slide","disabled","_c","$RefreshReg$"],"sources":["C:/Users/peter/OneDrive/idk/Dokumenty/Multimedia/src/components/MainPageComponents/Second/PopUpContent/PopUpContent.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './PopUpContent.scss';\r\n\r\ninterface TheorySlide {\r\n    type: \"Theory\";\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\ninterface PracticalSlide {\r\n    type: \"Practical\";\r\n    title: string;\r\n    content: string;\r\n    exercise: any; // Define a more specific type for your exercises\r\n}\r\n\r\ninterface ConclusionSlide {\r\n    type: \"Conclusion\";\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\ntype Slide = TheorySlide | PracticalSlide | ConclusionSlide;\r\n\r\nconst PopUpContent = () => {\r\n    const [currentSlide, setCurrentSlide] = useState<number>(0);\r\n    const [selectedOption, setSelectedOption] = useState<string | null>(null);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [question: string]: string }>({});\r\n    const [draggedItem, setDraggedItem] = useState<string | null>(null);\r\n    const [filledBlanks, setFilledBlanks] = useState<{ [key: string]: string }>({});\r\n    const [matchingSelections, setMatchingSelections] = useState<{ [key: string]: string }>({});\r\n    const [checkResult, setCheckResult] = useState<string | null>(null);\r\n\r\n    const [selectedLeft, setSelectedLeft] = useState<string | null>(null);\r\n    const [selectedRight, setSelectedRight] = useState<string | null>(null);\r\n    const [userSelections, setUserSelections] = useState<{ [key: string]: string }>({});\r\n\r\n\r\n    const originalPairs = [\r\n        { left: \"Diegetic Sound\", right: \"Dialogue within a scene\" },\r\n        { left: \"Non-Diegetic Sound\", right: \"Narrator's commentary\" },\r\n        { left: \"Ambient Sound\", right: \"Background city noise\" },\r\n        { left: \"Foley\", right: \"Artificially created sounds, like footsteps\" },\r\n        { left: \"Sound Effects (SFX)\", right: \"Gunshots, explosions\" },\r\n        { left: \"Background Music\", right: \"Music score enhancing mood\" },\r\n        { left: \"Direct Sound\", right: \"Sounds captured by the primary microphone\" }\r\n    ];\r\n\r\n\r\n\r\n    const theorySlides: TheorySlide[] = [\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Introduction to Video Editing Software\",\r\n            content: \"Learn about different types of video editing software, their interfaces, and key features...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Basic Editing Techniques\",\r\n            content: \"Explore the fundamentals of cutting, trimming, and sequencing clips to tell a story...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Sound Design in Video Editing\",\r\n            content: \"Understand the importance of sound, how to add soundtracks, and balance audio in your edits...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Color Correction and Grading\",\r\n            content: \"Discover how to enhance your video's look with color correction and grading...\"\r\n        },\r\n        // Add more theory slides as needed\r\n    ];\r\n\r\n    const practicalSlides: PracticalSlide[] = [\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Video Software Features Quiz\",\r\n            content: \"Test your knowledge on different video editing software features.\",\r\n            exercise: {\r\n                type: \"multiple-choice\",\r\n                questions: [\r\n                    // Sample question\r\n                    {\r\n                        question: \"Which software uses a Magnetic Timeline?\",\r\n                        options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\"],\r\n                        correctAnswer: \"Final Cut Pro\"\r\n                    },\r\n                    // Add more questions\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Fill in the Blanks\",\r\n            content: \"Drag the correct terms into the blanks.\",\r\n            exercise: {\r\n                type: \"drag-and-drop\",\r\n                text: [\"The editing software \", \"____\", \" is known for its \", \"____\", \".\"],\r\n                blanks: { blank1: \"Adobe Premiere Pro\", blank2: \"Magnetic Timeline\" },\r\n                options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\", \"Magnetic Timeline\", \"Color Correction\"]\r\n            }\r\n        },\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Sound Design Challenge\",\r\n            content: \"Match the sound type with its correct example.\",\r\n            exercise: {\r\n                type: \"matching\",\r\n                pairs: originalPairs // Use the originalPairs array here\r\n            }\r\n        },\r\n    ];\r\n\r\n\r\n    const conclusionSlide: ConclusionSlide = {\r\n        type: \"Conclusion\",\r\n        title: \"Summary of Key Concepts\",\r\n        content: \"Recap of the key points covered in the course, emphasizing the importance of storytelling, technical skills, and creativity in video editing.\"\r\n    };\r\n\r\n    const slides: Slide[] = [...theorySlides, ...practicalSlides, conclusionSlide];\r\n\r\n    const goToNextSlide = () => {\r\n        setCurrentSlide(currentSlide + 1);\r\n        setSelectedOption(null);\r\n    };\r\n\r\n    const goToPreviousSlide = () => {\r\n        setCurrentSlide(currentSlide - 1);\r\n        setSelectedOption(null);\r\n    };\r\n\r\n    const handleMultipleChoiceSelection = (question: string, option: string) => {\r\n        setSelectedAnswers(prev => ({ ...prev, [question]: option }));\r\n    };\r\n\r\n    const isAnswerCorrect = (question: string, option: string) => {\r\n        const currentExercise = (slides[currentSlide] as PracticalSlide).exercise;\r\n        if (currentExercise.type === \"multiple-choice\") {\r\n            const correctAnswer = currentExercise.questions.find((q: any) => q.question === question).correctAnswer;\r\n            return option === correctAnswer;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const renderMultipleChoiceQuestions = (exercise: any) => {\r\n        return (\r\n            <div>\r\n                {exercise.questions.map((question: any, index: number) => (\r\n                    <div key={index} className=\"quiz-question\">\r\n                        <p>{question.question}</p>\r\n                        {question.options.map((option: string, optIndex: number) => (\r\n                            <button\r\n                                key={optIndex}\r\n                                onClick={() => handleMultipleChoiceSelection(question.question, option)}\r\n                                className={selectedAnswers[question.question] === option ? 'selected' : ''}\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                        {selectedAnswers[question.question] &&\r\n                            <p className={isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'correct' : 'incorrect'}>\r\n                                {isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'Correct answer!' : 'Incorrect answer.'}\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleDragStart = (item: string, fromBlank: boolean = false) => {\r\n        if (fromBlank) {\r\n            // If dragging from a blank, remove the item from the blank\r\n            const updatedBlanks = { ...filledBlanks };\r\n            for (const key in updatedBlanks) {\r\n                if (updatedBlanks[key] === item) {\r\n                    updatedBlanks[key] = \"____\"; // Reset the blank\r\n                    break;\r\n                }\r\n            }\r\n            setFilledBlanks(updatedBlanks);\r\n        }\r\n        setDraggedItem(item);\r\n    };\r\n\r\n\r\n    const handleDrop = (blankIndex: number) => {\r\n        if (draggedItem) {\r\n            const blankKey = `blank${blankIndex + 1}`; // Adjust index to match key structure\r\n            setFilledBlanks(prev => ({ ...prev, [blankKey]: draggedItem }));\r\n            setDraggedItem(null);\r\n        }\r\n    };\r\n\r\n\r\n    const checkAnswers = () => {\r\n        const currentSlideData = slides[currentSlide] as PracticalSlide;\r\n        if (currentSlideData.type === \"Practical\" && currentSlideData.exercise.type === \"drag-and-drop\") {\r\n            let allCorrect = true;\r\n            for (const blankKey in currentSlideData.exercise.blanks) {\r\n                if (currentSlideData.exercise.blanks[blankKey] !== filledBlanks[blankKey]) {\r\n                    allCorrect = false;\r\n                    break;\r\n                }\r\n            }\r\n            setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\r\n        }\r\n    };\r\n\r\n    const renderDragAndDropExercise = (exercise: any) => {\r\n        return (\r\n            <div>\r\n                <div className=\"exercise-text\">\r\n                    {exercise.text.map((part: string, index: number) => (\r\n                        part === \"____\" ?\r\n                            <div\r\n                                key={index}\r\n                                className=\"blank\"\r\n                                onDrop={() => handleDrop(index)}\r\n                                onDragOver={(e) => e.preventDefault()}\r\n                                draggable\r\n                                onDragStart={() => handleDragStart(filledBlanks[`blank${index + 1}`], true)}\r\n                            >\r\n                                {filledBlanks[`blank${index + 1}`] || part}\r\n                            </div> :\r\n                            <span key={index}>{part}</span>\r\n                    ))}\r\n                </div>\r\n                <div className=\"options\">\r\n                    {exercise.options.map((option: string, index: number) => (\r\n                        <div\r\n                            key={index}\r\n                            className=\"draggable-option\"\r\n                            draggable\r\n                            onDragStart={() => handleDragStart(option)}\r\n                        >\r\n                            {option}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <button onClick={checkAnswers} className=\"check-answers-btn\">\r\n                    Check Answers\r\n                </button>\r\n                {checkResult && <div className=\"check-result\">{checkResult}</div>}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const shuffleArray = (array: any[]) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    };\r\n\r\n    const shuffledLeftOptions = shuffleArray(originalPairs.map(pair => pair.left));\r\n    const shuffledRightOptions = shuffleArray(originalPairs.map(pair => pair.right));\r\n\r\n    const handleMatchSelect = (left: string, right: string) => {\r\n        setMatchingSelections(prev => ({\r\n            ...prev,\r\n            [left]: right\r\n        }));\r\n    };\r\n\r\n    const checkIfMatchCorrect = () => {\r\n        let allCorrect = true;\r\n\r\n        for (const [left, right] of Object.entries(userSelections)) {\r\n            const correctPair = originalPairs.find(pair => pair.left === left && pair.right === right);\r\n            if (!correctPair) {\r\n                allCorrect = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\r\n    };\r\n\r\n    const handleSelect = (side: 'left' | 'right', option: string) => {\r\n        if (side === 'left') {\r\n            selectedLeftOptions.push(option);\r\n        } else {\r\n            selectedRightOptions.push(option);\r\n        }\r\n\r\n        if (selectedLeftOptions.length > 0 && selectedRightOptions.length > 0) {\r\n            const leftPairIndex = originalPairs.findIndex(pair => pair.left === selectedLeftOptions.shift());\r\n            const rightPairIndex = originalPairs.findIndex(pair => pair.right === selectedRightOptions.shift());\r\n\r\n            if (leftPairIndex === rightPairIndex) {\r\n                // Correct match\r\n                setMatchingSelections(prev => ({\r\n                    ...prev,\r\n                    [leftPairIndex]: rightPairIndex\r\n                }));\r\n            } else {\r\n                // Incorrect match, clear selected options\r\n                selectedLeftOptions = [];\r\n                selectedRightOptions = [];\r\n            }\r\n        }\r\n    };\r\n    \r\n    const renderMatchingExercise = () => {\r\n        return (\r\n            <div className=\"matching-exercise-container\">\r\n                <div className=\"left-options\">\r\n                    {shuffledLeftOptions.map((option, index) => (\r\n                        <button key={index} onClick={() => handleSelect('left', option)}>\r\n                            {option}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div className=\"right-options\">\r\n                    {shuffledRightOptions.map((option, index) => (\r\n                        <button key={index} onClick={() => handleSelect('right', option)}>\r\n                            {option}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n    const renderExerciseContent = (exercise: any) => {\r\n        switch (exercise.type) {\r\n            case 'multiple-choice':\r\n                return renderMultipleChoiceQuestions(exercise);\r\n            case 'drag-and-drop':\r\n                return renderDragAndDropExercise(exercise);\r\n            case 'matching':\r\n                return renderMatchingExercise(exercise);\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const renderSlideContent = () => {\r\n        const slide = slides[currentSlide];\r\n\r\n        return (\r\n            <div>\r\n                <p>{slide.content}</p>\r\n                {slide.type === 'Practical' && renderExerciseContent(slide.exercise)}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"popup-content\">\r\n            <h2>{slides[currentSlide].title}</h2>\r\n            {renderSlideContent()}\r\n            <div className=\"navigation-buttons\">\r\n                <button onClick={goToPreviousSlide} disabled={currentSlide === 0}>Previous</button>\r\n                <button onClick={goToNextSlide} disabled={currentSlide === slides.length - 1}>Next</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PopUpContent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}