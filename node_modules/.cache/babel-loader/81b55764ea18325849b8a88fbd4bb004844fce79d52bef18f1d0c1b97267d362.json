{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\peter\\\\OneDrive\\\\idk\\\\Dokumenty\\\\Multimedia\\\\src\\\\components\\\\MainPageComponents\\\\Second\\\\PopUpContent\\\\PopUpContent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './PopUpContent.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopUpContent = () => {\n  _s();\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [filledBlanks, setFilledBlanks] = useState({});\n  const [matchingSelections, setMatchingSelections] = useState({});\n  const [checkResult, setCheckResult] = useState(null);\n  const leftOptions = shuffleArray(practicalSlides[1].exercise.pairs.map(pair => pair.left));\n  const rightOptions = shuffleArray(practicalSlides[1].exercise.pairs.map(pair => pair.right));\n  const theorySlides = [{\n    type: \"Theory\",\n    title: \"Introduction to Video Editing Software\",\n    content: \"Learn about different types of video editing software, their interfaces, and key features...\"\n  }, {\n    type: \"Theory\",\n    title: \"Basic Editing Techniques\",\n    content: \"Explore the fundamentals of cutting, trimming, and sequencing clips to tell a story...\"\n  }, {\n    type: \"Theory\",\n    title: \"Sound Design in Video Editing\",\n    content: \"Understand the importance of sound, how to add soundtracks, and balance audio in your edits...\"\n  }, {\n    type: \"Theory\",\n    title: \"Color Correction and Grading\",\n    content: \"Discover how to enhance your video's look with color correction and grading...\"\n  }\n  // Add more theory slides as needed\n  ];\n\n  const practicalSlides = [{\n    type: \"Practical\",\n    title: \"Video Software Features Quiz\",\n    content: \"Test your knowledge on different video editing software features.\",\n    exercise: {\n      type: \"multiple-choice\",\n      questions: [\n      // Sample question\n      {\n        question: \"Which software uses a Magnetic Timeline?\",\n        options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\"],\n        correctAnswer: \"Final Cut Pro\"\n      }\n      // Add more questions\n      ]\n    }\n  }, {\n    type: \"Practical\",\n    title: \"Fill in the Blanks\",\n    content: \"Drag the correct terms into the blanks.\",\n    exercise: {\n      type: \"drag-and-drop\",\n      text: [\"The editing software \", \"____\", \" is known for its \", \"____\", \".\"],\n      blanks: {\n        blank1: \"Adobe Premiere Pro\",\n        blank2: \"Magnetic Timeline\"\n      },\n      options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\", \"Magnetic Timeline\", \"Color Correction\"]\n    }\n  }, {\n    type: \"Practical\",\n    title: \"Sound Design Challenge\",\n    content: \"Match the sound type with its correct example.\",\n    exercise: {\n      type: \"matching\",\n      pairs: [{\n        left: \"Diegetic Sound\",\n        right: \"Dialogue within a scene\"\n      }, {\n        left: \"Non-Diegetic Sound\",\n        right: \"Narrator's commentary\"\n      }, {\n        left: \"Ambient Sound\",\n        right: \"Background city noise\"\n      }, {\n        left: \"Foley\",\n        right: \"Artificially created sounds, like footsteps\"\n      }, {\n        left: \"Sound Effects (SFX)\",\n        right: \"Gunshots, explosions\"\n      }, {\n        left: \"Background Music\",\n        right: \"Music score enhancing mood\"\n      }, {\n        left: \"Direct Sound\",\n        right: \"Sounds captured by the primary microphone\"\n      }]\n    }\n  }];\n  const conclusionSlide = {\n    type: \"Conclusion\",\n    title: \"Summary of Key Concepts\",\n    content: \"Recap of the key points covered in the course, emphasizing the importance of storytelling, technical skills, and creativity in video editing.\"\n  };\n  const slides = [...theorySlides, ...practicalSlides, conclusionSlide];\n  const goToNextSlide = () => {\n    setCurrentSlide(currentSlide + 1);\n    setSelectedOption(null);\n  };\n  const goToPreviousSlide = () => {\n    setCurrentSlide(currentSlide - 1);\n    setSelectedOption(null);\n  };\n  const handleMultipleChoiceSelection = (question, option) => {\n    setSelectedAnswers(prev => ({\n      ...prev,\n      [question]: option\n    }));\n  };\n  const isAnswerCorrect = (question, option) => {\n    const currentExercise = slides[currentSlide].exercise;\n    if (currentExercise.type === \"multiple-choice\") {\n      const correctAnswer = currentExercise.questions.find(q => q.question === question).correctAnswer;\n      return option === correctAnswer;\n    }\n    return false;\n  };\n  const renderMultipleChoiceQuestions = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: exercise.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this), question.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMultipleChoiceSelection(question.question, option),\n          className: selectedAnswers[question.question] === option ? 'selected' : '',\n          children: option\n        }, optIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this)), selectedAnswers[question.question] && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'correct' : 'incorrect',\n          children: isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'Correct answer!' : 'Incorrect answer.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  };\n  const handleDragStart = (item, fromBlank = false) => {\n    if (fromBlank) {\n      // If dragging from a blank, remove the item from the blank\n      const updatedBlanks = {\n        ...filledBlanks\n      };\n      for (const key in updatedBlanks) {\n        if (updatedBlanks[key] === item) {\n          updatedBlanks[key] = \"____\"; // Reset the blank\n          break;\n        }\n      }\n      setFilledBlanks(updatedBlanks);\n    }\n    setDraggedItem(item);\n  };\n  const handleDrop = blankIndex => {\n    if (draggedItem) {\n      const blankKey = `blank${blankIndex + 1}`; // Adjust index to match key structure\n      setFilledBlanks(prev => ({\n        ...prev,\n        [blankKey]: draggedItem\n      }));\n      setDraggedItem(null);\n    }\n  };\n  const checkAnswers = () => {\n    const currentSlideData = slides[currentSlide];\n    if (currentSlideData.type === \"Practical\" && currentSlideData.exercise.type === \"drag-and-drop\") {\n      let allCorrect = true;\n      for (const blankKey in currentSlideData.exercise.blanks) {\n        if (currentSlideData.exercise.blanks[blankKey] !== filledBlanks[blankKey]) {\n          allCorrect = false;\n          break;\n        }\n      }\n      setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\n    }\n  };\n  const renderDragAndDropExercise = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-text\",\n        children: exercise.text.map((part, index) => part === \"____\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blank\",\n          onDrop: () => handleDrop(index),\n          onDragOver: e => e.preventDefault(),\n          draggable: true,\n          onDragStart: () => handleDragStart(filledBlanks[`blank${index + 1}`], true),\n          children: filledBlanks[`blank${index + 1}`] || part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: exercise.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"draggable-option\",\n          draggable: true,\n          onDragStart: () => handleDragStart(option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkAnswers,\n        className: \"check-answers-btn\",\n        children: \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), checkResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"check-result\",\n        children: checkResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this);\n  };\n  const shuffleArray = array => {\n    return array.sort(() => Math.random() - 0.5);\n  };\n  const handleMatchSelect = (left, right) => {\n    setMatchingSelections(prev => ({\n      ...prev,\n      [left]: right\n    }));\n  };\n  const checkIfMatchCorrect = (left, right, exercise) => {\n    const correctPair = exercise.pairs.find(pair => pair.left === left);\n    return correctPair && correctPair.right === right;\n  };\n  const renderMatchingExercise = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matching-exercise-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-options\",\n        children: leftOptions.map((leftOption, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"matching-option left\",\n          children: leftOption\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-options\",\n        children: rightOptions.map((rightOption, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"matching-option right\",\n          children: rightOption\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this);\n  };\n  const renderExerciseContent = exercise => {\n    switch (exercise.type) {\n      case 'multiple-choice':\n        return renderMultipleChoiceQuestions(exercise);\n      case 'drag-and-drop':\n        return renderDragAndDropExercise(exercise);\n      case 'matching':\n        return renderMatchingExercise(exercise);\n      default:\n        return null;\n    }\n  };\n  const renderSlideContent = () => {\n    const slide = slides[currentSlide];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: slide.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), slide.type === 'Practical' && renderExerciseContent(slide.exercise)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: slides[currentSlide].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this), renderSlideContent(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPreviousSlide,\n        disabled: currentSlide === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextSlide,\n        disabled: currentSlide === slides.length - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 9\n  }, this);\n};\n_s(PopUpContent, \"id3Vummdi0ueAnQH0WEzBThweIY=\");\n_c = PopUpContent;\nexport default PopUpContent;\nvar _c;\n$RefreshReg$(_c, \"PopUpContent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PopUpContent","_s","currentSlide","setCurrentSlide","selectedOption","setSelectedOption","selectedAnswers","setSelectedAnswers","draggedItem","setDraggedItem","filledBlanks","setFilledBlanks","matchingSelections","setMatchingSelections","checkResult","setCheckResult","leftOptions","shuffleArray","practicalSlides","exercise","pairs","map","pair","left","rightOptions","right","theorySlides","type","title","content","questions","question","options","correctAnswer","text","blanks","blank1","blank2","conclusionSlide","slides","goToNextSlide","goToPreviousSlide","handleMultipleChoiceSelection","option","prev","isAnswerCorrect","currentExercise","find","q","renderMultipleChoiceQuestions","children","index","className","fileName","_jsxFileName","lineNumber","columnNumber","optIndex","onClick","handleDragStart","item","fromBlank","updatedBlanks","key","handleDrop","blankIndex","blankKey","checkAnswers","currentSlideData","allCorrect","renderDragAndDropExercise","part","onDrop","onDragOver","e","preventDefault","draggable","onDragStart","array","sort","Math","random","handleMatchSelect","checkIfMatchCorrect","correctPair","renderMatchingExercise","leftOption","rightOption","renderExerciseContent","renderSlideContent","slide","disabled","length","_c","$RefreshReg$"],"sources":["C:/Users/peter/OneDrive/idk/Dokumenty/Multimedia/src/components/MainPageComponents/Second/PopUpContent/PopUpContent.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './PopUpContent.scss';\r\n\r\ninterface TheorySlide {\r\n    type: \"Theory\";\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\ninterface PracticalSlide {\r\n    type: \"Practical\";\r\n    title: string;\r\n    content: string;\r\n    exercise: any; // Define a more specific type for your exercises\r\n}\r\n\r\ninterface ConclusionSlide {\r\n    type: \"Conclusion\";\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\ntype Slide = TheorySlide | PracticalSlide | ConclusionSlide;\r\n\r\nconst PopUpContent = () => {\r\n    const [currentSlide, setCurrentSlide] = useState<number>(0);\r\n    const [selectedOption, setSelectedOption] = useState<string | null>(null);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [question: string]: string }>({});\r\n    const [draggedItem, setDraggedItem] = useState<string | null>(null);\r\n    const [filledBlanks, setFilledBlanks] = useState<{ [key: string]: string }>({});\r\n    const [matchingSelections, setMatchingSelections] = useState<{ [key: string]: string }>({});\r\n    const [checkResult, setCheckResult] = useState<string | null>(null);\r\n    const leftOptions = shuffleArray(practicalSlides[1].exercise.pairs.map(pair => pair.left));\r\n    const rightOptions = shuffleArray(practicalSlides[1].exercise.pairs.map(pair => pair.right));\r\n\r\n\r\n\r\n    const theorySlides: TheorySlide[] = [\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Introduction to Video Editing Software\",\r\n            content: \"Learn about different types of video editing software, their interfaces, and key features...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Basic Editing Techniques\",\r\n            content: \"Explore the fundamentals of cutting, trimming, and sequencing clips to tell a story...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Sound Design in Video Editing\",\r\n            content: \"Understand the importance of sound, how to add soundtracks, and balance audio in your edits...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Color Correction and Grading\",\r\n            content: \"Discover how to enhance your video's look with color correction and grading...\"\r\n        },\r\n        // Add more theory slides as needed\r\n    ];\r\n\r\n    const practicalSlides: PracticalSlide[] = [\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Video Software Features Quiz\",\r\n            content: \"Test your knowledge on different video editing software features.\",\r\n            exercise: {\r\n                type: \"multiple-choice\",\r\n                questions: [\r\n                    // Sample question\r\n                    {\r\n                        question: \"Which software uses a Magnetic Timeline?\",\r\n                        options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\"],\r\n                        correctAnswer: \"Final Cut Pro\"\r\n                    },\r\n                    // Add more questions\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Fill in the Blanks\",\r\n            content: \"Drag the correct terms into the blanks.\",\r\n            exercise: {\r\n                type: \"drag-and-drop\",\r\n                text: [\"The editing software \", \"____\", \" is known for its \", \"____\", \".\"],\r\n                blanks: { blank1: \"Adobe Premiere Pro\", blank2: \"Magnetic Timeline\" },\r\n                options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\", \"Magnetic Timeline\", \"Color Correction\"]\r\n            }\r\n        },\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Sound Design Challenge\",\r\n            content: \"Match the sound type with its correct example.\",\r\n            exercise: {\r\n                type: \"matching\",\r\n                pairs: [\r\n                    { left: \"Diegetic Sound\", right: \"Dialogue within a scene\" },\r\n                    { left: \"Non-Diegetic Sound\", right: \"Narrator's commentary\" },\r\n                    { left: \"Ambient Sound\", right: \"Background city noise\" },\r\n                    { left: \"Foley\", right: \"Artificially created sounds, like footsteps\" },\r\n                    { left: \"Sound Effects (SFX)\", right: \"Gunshots, explosions\" },\r\n                    { left: \"Background Music\", right: \"Music score enhancing mood\" },\r\n                    { left: \"Direct Sound\", right: \"Sounds captured by the primary microphone\" },\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n\r\n\r\n    const conclusionSlide: ConclusionSlide = {\r\n        type: \"Conclusion\",\r\n        title: \"Summary of Key Concepts\",\r\n        content: \"Recap of the key points covered in the course, emphasizing the importance of storytelling, technical skills, and creativity in video editing.\"\r\n    };\r\n\r\n    const slides: Slide[] = [...theorySlides, ...practicalSlides, conclusionSlide];\r\n\r\n    const goToNextSlide = () => {\r\n        setCurrentSlide(currentSlide + 1);\r\n        setSelectedOption(null);\r\n    };\r\n\r\n    const goToPreviousSlide = () => {\r\n        setCurrentSlide(currentSlide - 1);\r\n        setSelectedOption(null);\r\n    };\r\n\r\n    const handleMultipleChoiceSelection = (question: string, option: string) => {\r\n        setSelectedAnswers(prev => ({ ...prev, [question]: option }));\r\n    };\r\n\r\n    const isAnswerCorrect = (question: string, option: string) => {\r\n        const currentExercise = (slides[currentSlide] as PracticalSlide).exercise;\r\n        if (currentExercise.type === \"multiple-choice\") {\r\n            const correctAnswer = currentExercise.questions.find((q: any) => q.question === question).correctAnswer;\r\n            return option === correctAnswer;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const renderMultipleChoiceQuestions = (exercise: any) => {\r\n        return (\r\n            <div>\r\n                {exercise.questions.map((question: any, index: number) => (\r\n                    <div key={index} className=\"quiz-question\">\r\n                        <p>{question.question}</p>\r\n                        {question.options.map((option: string, optIndex: number) => (\r\n                            <button\r\n                                key={optIndex}\r\n                                onClick={() => handleMultipleChoiceSelection(question.question, option)}\r\n                                className={selectedAnswers[question.question] === option ? 'selected' : ''}\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                        {selectedAnswers[question.question] &&\r\n                            <p className={isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'correct' : 'incorrect'}>\r\n                                {isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'Correct answer!' : 'Incorrect answer.'}\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleDragStart = (item: string, fromBlank: boolean = false) => {\r\n        if (fromBlank) {\r\n            // If dragging from a blank, remove the item from the blank\r\n            const updatedBlanks = { ...filledBlanks };\r\n            for (const key in updatedBlanks) {\r\n                if (updatedBlanks[key] === item) {\r\n                    updatedBlanks[key] = \"____\"; // Reset the blank\r\n                    break;\r\n                }\r\n            }\r\n            setFilledBlanks(updatedBlanks);\r\n        }\r\n        setDraggedItem(item);\r\n    };\r\n\r\n\r\n    const handleDrop = (blankIndex: number) => {\r\n        if (draggedItem) {\r\n            const blankKey = `blank${blankIndex + 1}`; // Adjust index to match key structure\r\n            setFilledBlanks(prev => ({ ...prev, [blankKey]: draggedItem }));\r\n            setDraggedItem(null);\r\n        }\r\n    };\r\n\r\n\r\n    const checkAnswers = () => {\r\n        const currentSlideData = slides[currentSlide] as PracticalSlide;\r\n        if (currentSlideData.type === \"Practical\" && currentSlideData.exercise.type === \"drag-and-drop\") {\r\n            let allCorrect = true;\r\n            for (const blankKey in currentSlideData.exercise.blanks) {\r\n                if (currentSlideData.exercise.blanks[blankKey] !== filledBlanks[blankKey]) {\r\n                    allCorrect = false;\r\n                    break;\r\n                }\r\n            }\r\n            setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\r\n        }\r\n    };\r\n\r\n    const renderDragAndDropExercise = (exercise: any) => {\r\n        return (\r\n            <div>\r\n                <div className=\"exercise-text\">\r\n                    {exercise.text.map((part: string, index: number) => (\r\n                        part === \"____\" ?\r\n                            <div\r\n                                key={index}\r\n                                className=\"blank\"\r\n                                onDrop={() => handleDrop(index)}\r\n                                onDragOver={(e) => e.preventDefault()}\r\n                                draggable\r\n                                onDragStart={() => handleDragStart(filledBlanks[`blank${index + 1}`], true)}\r\n                            >\r\n                                {filledBlanks[`blank${index + 1}`] || part}\r\n                            </div> :\r\n                            <span key={index}>{part}</span>\r\n                    ))}\r\n                </div>\r\n                <div className=\"options\">\r\n                    {exercise.options.map((option: string, index: number) => (\r\n                        <div\r\n                            key={index}\r\n                            className=\"draggable-option\"\r\n                            draggable\r\n                            onDragStart={() => handleDragStart(option)}\r\n                        >\r\n                            {option}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <button onClick={checkAnswers} className=\"check-answers-btn\">\r\n                    Check Answers\r\n                </button>\r\n                {checkResult && <div className=\"check-result\">{checkResult}</div>}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const shuffleArray = (array: any[]) => {\r\n        return array.sort(() => Math.random() - 0.5);\r\n    };\r\n\r\n    const handleMatchSelect = (left: string, right: string) => {\r\n        setMatchingSelections(prev => ({\r\n            ...prev,\r\n            [left]: right\r\n        }));\r\n    };\r\n\r\n    const checkIfMatchCorrect = (left: string, right: string, exercise: any) => {\r\n        const correctPair = exercise.pairs.find((pair: any) => pair.left === left);\r\n        return correctPair && correctPair.right === right;\r\n    };\r\n\r\n    const renderMatchingExercise = (exercise: any) => {\r\n        return (\r\n            <div className=\"matching-exercise-container\">\r\n                <div className=\"left-options\">\r\n                    {leftOptions.map((leftOption, index) => (\r\n                        <button key={index} className=\"matching-option left\">\r\n                            {leftOption}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div className=\"right-options\">\r\n                    {rightOptions.map((rightOption, index) => (\r\n                        <button key={index} className=\"matching-option right\">\r\n                            {rightOption}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderExerciseContent = (exercise: any) => {\r\n        switch (exercise.type) {\r\n            case 'multiple-choice':\r\n                return renderMultipleChoiceQuestions(exercise);\r\n            case 'drag-and-drop':\r\n                return renderDragAndDropExercise(exercise);\r\n            case 'matching':\r\n                return renderMatchingExercise(exercise);\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const renderSlideContent = () => {\r\n        const slide = slides[currentSlide];\r\n\r\n        return (\r\n            <div>\r\n                <p>{slide.content}</p>\r\n                {slide.type === 'Practical' && renderExerciseContent(slide.exercise)}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"popup-content\">\r\n            <h2>{slides[currentSlide].title}</h2>\r\n            {renderSlideContent()}\r\n            <div className=\"navigation-buttons\">\r\n                <button onClick={goToPreviousSlide} disabled={currentSlide === 0}>Previous</button>\r\n                <button onClick={goToNextSlide} disabled={currentSlide === slides.length - 1}>Next</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PopUpContent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}