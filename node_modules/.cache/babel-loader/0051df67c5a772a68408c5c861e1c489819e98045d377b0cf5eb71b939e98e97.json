{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\peter\\\\OneDrive\\\\idk\\\\Dokumenty\\\\Multimedia\\\\src\\\\components\\\\MainPageComponents\\\\Second\\\\PopUpContent\\\\PopUpContent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './PopUpContent.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopUpContent = () => {\n  _s();\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [filledBlanks, setFilledBlanks] = useState({});\n  const [matchingSelections, setMatchingSelections] = useState({});\n  const [checkResult, setCheckResult] = useState(null);\n  const theorySlides = [{\n    type: \"Theory\",\n    title: \"Introduction to Video Editing Software\",\n    content: \"Learn about different types of video editing software, their interfaces, and key features...\"\n  }, {\n    type: \"Theory\",\n    title: \"Basic Editing Techniques\",\n    content: \"Explore the fundamentals of cutting, trimming, and sequencing clips to tell a story...\"\n  }, {\n    type: \"Theory\",\n    title: \"Sound Design in Video Editing\",\n    content: \"Understand the importance of sound, how to add soundtracks, and balance audio in your edits...\"\n  }, {\n    type: \"Theory\",\n    title: \"Color Correction and Grading\",\n    content: \"Discover how to enhance your video's look with color correction and grading...\"\n  }\n  // Add more theory slides as needed\n  ];\n\n  const practicalSlides = [{\n    type: \"Practical\",\n    title: \"Video Software Features Quiz\",\n    content: \"Test your knowledge on different video editing software features.\",\n    exercise: {\n      type: \"multiple-choice\",\n      questions: [\n      // Sample question\n      {\n        question: \"Which software uses a Magnetic Timeline?\",\n        options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\"],\n        correctAnswer: \"Final Cut Pro\"\n      }\n      // Add more questions\n      ]\n    }\n  }, {\n    type: \"Practical\",\n    title: \"Fill in the Blanks\",\n    content: \"Drag the correct terms into the blanks.\",\n    exercise: {\n      type: \"drag-and-drop\",\n      text: [\"The editing software \", \"____\", \" is known for its \", \"____\", \".\"],\n      blanks: {\n        blank1: \"Adobe Premiere Pro\",\n        blank2: \"Magnetic Timeline\"\n      },\n      options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\", \"Magnetic Timeline\", \"Color Correction\"]\n    }\n  }, {\n    type: \"Practical\",\n    title: \"Sound Design Challenge\",\n    content: \"Match the sound type with its correct example.\",\n    exercise: {\n      type: \"matching\",\n      pairs: [\n      // Sample pair\n      {\n        left: \"Diegetic Sound\",\n        right: \"Dialogue within a scene\"\n      }\n      // Add more pairs\n      ]\n    }\n  }\n  // Add more practical slides as needed\n  ];\n\n  const conclusionSlide = {\n    type: \"Conclusion\",\n    title: \"Summary of Key Concepts\",\n    content: \"Recap of the key points covered in the course, emphasizing the importance of storytelling, technical skills, and creativity in video editing.\"\n  };\n  const slides = [...theorySlides, ...practicalSlides, conclusionSlide];\n  const goToNextSlide = () => {\n    setCurrentSlide(currentSlide + 1);\n    setSelectedOption(null);\n  };\n  const goToPreviousSlide = () => {\n    setCurrentSlide(currentSlide - 1);\n    setSelectedOption(null);\n  };\n  const handleMultipleChoiceSelection = (question, option) => {\n    setSelectedAnswers(prev => ({\n      ...prev,\n      [question]: option\n    }));\n  };\n  const isAnswerCorrect = (question, option) => {\n    const currentExercise = slides[currentSlide].exercise;\n    if (currentExercise.type === \"multiple-choice\") {\n      const correctAnswer = currentExercise.questions.find(q => q.question === question).correctAnswer;\n      return option === correctAnswer;\n    }\n    return false;\n  };\n  const renderMultipleChoiceQuestions = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: exercise.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), question.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMultipleChoiceSelection(question.question, option),\n          className: selectedAnswers[question.question] === option ? 'selected' : '',\n          children: option\n        }, optIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this)), selectedAnswers[question.question] && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'correct' : 'incorrect',\n          children: isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'Correct answer!' : 'Incorrect answer.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  };\n  const handleDragStart = (item, fromBlank = false) => {\n    if (fromBlank) {\n      // If dragging from a blank, remove the item from the blank\n      const updatedBlanks = {\n        ...filledBlanks\n      };\n      for (const key in updatedBlanks) {\n        if (updatedBlanks[key] === item) {\n          updatedBlanks[key] = \"____\"; // Reset the blank\n          break;\n        }\n      }\n      setFilledBlanks(updatedBlanks);\n    }\n    setDraggedItem(item);\n  };\n  const handleDrop = blankIndex => {\n    if (draggedItem) {\n      // Construct the key name based on the index, e.g., 'blank1', 'blank2', etc.\n      const blankKey = `blank${blankIndex + 1}`;\n      setFilledBlanks(prev => ({\n        ...prev,\n        [blankKey]: draggedItem\n      }));\n      setDraggedItem(null);\n    }\n  };\n  const checkAnswers = () => {\n    const currentSlideData = slides[currentSlide];\n    if (currentSlideData.type === \"Practical\" && currentSlideData.exercise.type === \"drag-and-drop\") {\n      let allCorrect = true;\n      for (const blankKey in currentSlideData.exercise.blanks) {\n        if (currentSlideData.exercise.blanks[blankKey] !== filledBlanks[blankKey]) {\n          allCorrect = false;\n          break;\n        }\n      }\n      setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\n    }\n  };\n  const renderDragAndDropExercise = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-text\",\n        children: exercise.text.map((part, index) => part === \"____\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blank\",\n          onDrop: () => handleDrop(index),\n          onDragOver: e => e.preventDefault(),\n          draggable: true,\n          onDragStart: () => handleDragStart(filledBlanks[`blank${index + 1}`], true),\n          children: filledBlanks[`blank${index + 1}`] || part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: exercise.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"draggable-option\",\n          draggable: true,\n          onDragStart: () => handleDragStart(option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkAnswers,\n        className: \"check-answers-btn\",\n        children: \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), checkResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"check-result\",\n        children: checkResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this);\n  };\n  const handleMatchSelect = (left, right) => {\n    setMatchingSelections(prev => ({\n      ...prev,\n      [left]: right\n    }));\n  };\n  const checkIfMatchCorrect = (left, right, exercise) => {\n    const correctPair = exercise.pairs.find(pair => pair.left === left);\n    return correctPair && correctPair.right === right;\n  };\n  const renderMatchingExercise = exercise => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matching-exercise-container\",\n      children: exercise.pairs.map((pair, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matching-pair\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `matching-option left ${matchingSelections[pair.left] ? 'selected' : ''}`,\n          onClick: () => handleMatchSelect(pair.left, matchingSelections[pair.left] || ''),\n          children: pair.left\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `matching-option right ${matchingSelections[pair.left] === pair.right ? 'selected' : ''}`,\n          onClick: () => handleMatchSelect(pair.left, pair.right),\n          children: pair.right\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this), matchingSelections[pair.left] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: checkIfMatchCorrect(pair.left, matchingSelections[pair.left], exercise) ? 'correct' : 'incorrect',\n          children: checkIfMatchCorrect(pair.left, matchingSelections[pair.left], exercise) ? 'Correct' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this);\n  };\n  const renderExerciseContent = exercise => {\n    switch (exercise.type) {\n      case 'multiple-choice':\n        return renderMultipleChoiceQuestions(exercise);\n      case 'drag-and-drop':\n        return renderDragAndDropExercise(exercise);\n      case 'matching':\n        return renderMatchingExercise(exercise);\n      default:\n        return null;\n    }\n  };\n  const renderSlideContent = () => {\n    const slide = slides[currentSlide];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: slide.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), slide.type === 'Practical' && renderExerciseContent(slide.exercise)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: slides[currentSlide].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this), renderSlideContent(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToPreviousSlide,\n        disabled: currentSlide === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToNextSlide,\n        disabled: currentSlide === slides.length - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 9\n  }, this);\n};\n_s(PopUpContent, \"id3Vummdi0ueAnQH0WEzBThweIY=\");\n_c = PopUpContent;\nexport default PopUpContent;\nvar _c;\n$RefreshReg$(_c, \"PopUpContent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PopUpContent","_s","currentSlide","setCurrentSlide","selectedOption","setSelectedOption","selectedAnswers","setSelectedAnswers","draggedItem","setDraggedItem","filledBlanks","setFilledBlanks","matchingSelections","setMatchingSelections","checkResult","setCheckResult","theorySlides","type","title","content","practicalSlides","exercise","questions","question","options","correctAnswer","text","blanks","blank1","blank2","pairs","left","right","conclusionSlide","slides","goToNextSlide","goToPreviousSlide","handleMultipleChoiceSelection","option","prev","isAnswerCorrect","currentExercise","find","q","renderMultipleChoiceQuestions","children","map","index","className","fileName","_jsxFileName","lineNumber","columnNumber","optIndex","onClick","handleDragStart","item","fromBlank","updatedBlanks","key","handleDrop","blankIndex","blankKey","checkAnswers","currentSlideData","allCorrect","renderDragAndDropExercise","part","onDrop","onDragOver","e","preventDefault","draggable","onDragStart","handleMatchSelect","checkIfMatchCorrect","correctPair","pair","renderMatchingExercise","renderExerciseContent","renderSlideContent","slide","disabled","length","_c","$RefreshReg$"],"sources":["C:/Users/peter/OneDrive/idk/Dokumenty/Multimedia/src/components/MainPageComponents/Second/PopUpContent/PopUpContent.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './PopUpContent.scss';\r\n\r\ninterface TheorySlide {\r\n    type: \"Theory\";\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\ninterface PracticalSlide {\r\n    type: \"Practical\";\r\n    title: string;\r\n    content: string;\r\n    exercise: any; // Define a more specific type for your exercises\r\n}\r\n\r\ninterface ConclusionSlide {\r\n    type: \"Conclusion\";\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\ntype Slide = TheorySlide | PracticalSlide | ConclusionSlide;\r\n\r\nconst PopUpContent = () => {\r\n    const [currentSlide, setCurrentSlide] = useState<number>(0);\r\n    const [selectedOption, setSelectedOption] = useState<string | null>(null);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [question: string]: string }>({});\r\n    const [draggedItem, setDraggedItem] = useState<string | null>(null);\r\n    const [filledBlanks, setFilledBlanks] = useState<{ [key: string]: string }>({});\r\n    const [matchingSelections, setMatchingSelections] = useState<{ [key: string]: string }>({});\r\n    const [checkResult, setCheckResult] = useState<string | null>(null);\r\n\r\n\r\n    const theorySlides: TheorySlide[] = [\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Introduction to Video Editing Software\",\r\n            content: \"Learn about different types of video editing software, their interfaces, and key features...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Basic Editing Techniques\",\r\n            content: \"Explore the fundamentals of cutting, trimming, and sequencing clips to tell a story...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Sound Design in Video Editing\",\r\n            content: \"Understand the importance of sound, how to add soundtracks, and balance audio in your edits...\"\r\n        },\r\n        {\r\n            type: \"Theory\",\r\n            title: \"Color Correction and Grading\",\r\n            content: \"Discover how to enhance your video's look with color correction and grading...\"\r\n        },\r\n        // Add more theory slides as needed\r\n    ];\r\n\r\n    const practicalSlides: PracticalSlide[] = [\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Video Software Features Quiz\",\r\n            content: \"Test your knowledge on different video editing software features.\",\r\n            exercise: {\r\n                type: \"multiple-choice\",\r\n                questions: [\r\n                    // Sample question\r\n                    {\r\n                        question: \"Which software uses a Magnetic Timeline?\",\r\n                        options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\"],\r\n                        correctAnswer: \"Final Cut Pro\"\r\n                    },\r\n                    // Add more questions\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Fill in the Blanks\",\r\n            content: \"Drag the correct terms into the blanks.\",\r\n            exercise: {\r\n                type: \"drag-and-drop\",\r\n                text: [\"The editing software \", \"____\", \" is known for its \", \"____\", \".\"],\r\n                blanks: { blank1: \"Adobe Premiere Pro\", blank2: \"Magnetic Timeline\" },\r\n                options: [\"Adobe Premiere Pro\", \"Final Cut Pro\", \"DaVinci Resolve\", \"Magnetic Timeline\", \"Color Correction\"]\r\n            }\r\n        },\r\n        {\r\n            type: \"Practical\",\r\n            title: \"Sound Design Challenge\",\r\n            content: \"Match the sound type with its correct example.\",\r\n            exercise: {\r\n                type: \"matching\",\r\n                pairs: [\r\n                    // Sample pair\r\n                    { left: \"Diegetic Sound\", right: \"Dialogue within a scene\" },\r\n                    // Add more pairs\r\n                ]\r\n            }\r\n        },\r\n        // Add more practical slides as needed\r\n    ];\r\n\r\n\r\n    const conclusionSlide: ConclusionSlide = {\r\n        type: \"Conclusion\",\r\n        title: \"Summary of Key Concepts\",\r\n        content: \"Recap of the key points covered in the course, emphasizing the importance of storytelling, technical skills, and creativity in video editing.\"\r\n    };\r\n\r\n    const slides: Slide[] = [...theorySlides, ...practicalSlides, conclusionSlide];\r\n\r\n    const goToNextSlide = () => {\r\n        setCurrentSlide(currentSlide + 1);\r\n        setSelectedOption(null);\r\n    };\r\n\r\n    const goToPreviousSlide = () => {\r\n        setCurrentSlide(currentSlide - 1);\r\n        setSelectedOption(null);\r\n    };\r\n\r\n    const handleMultipleChoiceSelection = (question: string, option: string) => {\r\n        setSelectedAnswers(prev => ({ ...prev, [question]: option }));\r\n    };\r\n\r\n    const isAnswerCorrect = (question: string, option: string) => {\r\n        const currentExercise = (slides[currentSlide] as PracticalSlide).exercise;\r\n        if (currentExercise.type === \"multiple-choice\") {\r\n            const correctAnswer = currentExercise.questions.find((q: any) => q.question === question).correctAnswer;\r\n            return option === correctAnswer;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const renderMultipleChoiceQuestions = (exercise: any) => {\r\n        return (\r\n            <div>\r\n                {exercise.questions.map((question: any, index: number) => (\r\n                    <div key={index} className=\"quiz-question\">\r\n                        <p>{question.question}</p>\r\n                        {question.options.map((option: string, optIndex: number) => (\r\n                            <button\r\n                                key={optIndex}\r\n                                onClick={() => handleMultipleChoiceSelection(question.question, option)}\r\n                                className={selectedAnswers[question.question] === option ? 'selected' : ''}\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                        {selectedAnswers[question.question] &&\r\n                            <p className={isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'correct' : 'incorrect'}>\r\n                                {isAnswerCorrect(question.question, selectedAnswers[question.question]) ? 'Correct answer!' : 'Incorrect answer.'}\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleDragStart = (item: string, fromBlank: boolean = false) => {\r\n        if (fromBlank) {\r\n            // If dragging from a blank, remove the item from the blank\r\n            const updatedBlanks = { ...filledBlanks };\r\n            for (const key in updatedBlanks) {\r\n                if (updatedBlanks[key] === item) {\r\n                    updatedBlanks[key] = \"____\"; // Reset the blank\r\n                    break;\r\n                }\r\n            }\r\n            setFilledBlanks(updatedBlanks);\r\n        }\r\n        setDraggedItem(item);\r\n    };\r\n\r\n\r\n    const handleDrop = (blankIndex: number) => {\r\n        if (draggedItem) {\r\n            // Construct the key name based on the index, e.g., 'blank1', 'blank2', etc.\r\n            const blankKey = `blank${blankIndex + 1}`;\r\n            setFilledBlanks(prev => ({ ...prev, [blankKey]: draggedItem }));\r\n            setDraggedItem(null);\r\n        }\r\n    };\r\n\r\n\r\n    const checkAnswers = () => {\r\n        const currentSlideData = slides[currentSlide] as PracticalSlide;\r\n        if (currentSlideData.type === \"Practical\" && currentSlideData.exercise.type === \"drag-and-drop\") {\r\n            let allCorrect = true;\r\n            for (const blankKey in currentSlideData.exercise.blanks) {\r\n                if (currentSlideData.exercise.blanks[blankKey] !== filledBlanks[blankKey]) {\r\n                    allCorrect = false;\r\n                    break;\r\n                }\r\n            }\r\n            setCheckResult(allCorrect ? \"All answers are correct!\" : \"Some answers are incorrect.\");\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const renderDragAndDropExercise = (exercise: any) => {\r\n        return (\r\n            <div>\r\n                <div className=\"exercise-text\">\r\n                    {exercise.text.map((part: string, index: number) => (\r\n                        part === \"____\" ?\r\n                            <div\r\n                                key={index}\r\n                                className=\"blank\"\r\n                                onDrop={() => handleDrop(index)}\r\n                                onDragOver={(e) => e.preventDefault()}\r\n                                draggable\r\n                                onDragStart={() => handleDragStart(filledBlanks[`blank${index + 1}`], true)}\r\n                            >\r\n                                {filledBlanks[`blank${index + 1}`] || part}\r\n                            </div> :\r\n                            <span key={index}>{part}</span>\r\n                    ))}\r\n                </div>\r\n                <div className=\"options\">\r\n                    {exercise.options.map((option: string, index: number) => (\r\n                        <div\r\n                            key={index}\r\n                            className=\"draggable-option\"\r\n                            draggable\r\n                            onDragStart={() => handleDragStart(option)}\r\n                        >\r\n                            {option}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <button onClick={checkAnswers} className=\"check-answers-btn\">\r\n                    Check Answers\r\n                </button>\r\n                {checkResult && <div className=\"check-result\">{checkResult}</div>}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleMatchSelect = (left: string, right: string) => {\r\n        setMatchingSelections(prev => ({\r\n            ...prev,\r\n            [left]: right\r\n        }));\r\n    };\r\n\r\n    const checkIfMatchCorrect = (left: string, right: string, exercise: any) => {\r\n        const correctPair = exercise.pairs.find((pair: any) => pair.left === left);\r\n        return correctPair && correctPair.right === right;\r\n    };\r\n\r\n    const renderMatchingExercise = (exercise: any) => {\r\n        return (\r\n            <div className=\"matching-exercise-container\">\r\n                {exercise.pairs.map((pair: any, index: number) => (\r\n                    <div key={index} className=\"matching-pair\">\r\n                        <button\r\n                            className={`matching-option left ${matchingSelections[pair.left] ? 'selected' : ''}`}\r\n                            onClick={() => handleMatchSelect(pair.left, matchingSelections[pair.left] || '')}\r\n                        >\r\n                            {pair.left}\r\n                        </button>\r\n                        <button\r\n                            className={`matching-option right ${matchingSelections[pair.left] === pair.right ? 'selected' : ''}`}\r\n                            onClick={() => handleMatchSelect(pair.left, pair.right)}\r\n                        >\r\n                            {pair.right}\r\n                        </button>\r\n                        {matchingSelections[pair.left] &&\r\n                            <span className={checkIfMatchCorrect(pair.left, matchingSelections[pair.left], exercise) ? 'correct' : 'incorrect'}>\r\n                            {checkIfMatchCorrect(pair.left, matchingSelections[pair.left], exercise) ? 'Correct' : 'Incorrect'}\r\n                        </span>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n    const renderExerciseContent = (exercise: any) => {\r\n        switch (exercise.type) {\r\n            case 'multiple-choice':\r\n                return renderMultipleChoiceQuestions(exercise);\r\n            case 'drag-and-drop':\r\n                return renderDragAndDropExercise(exercise);\r\n            case 'matching':\r\n                return renderMatchingExercise(exercise);\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const renderSlideContent = () => {\r\n        const slide = slides[currentSlide];\r\n\r\n        return (\r\n            <div>\r\n                <p>{slide.content}</p>\r\n                {slide.type === 'Practical' && renderExerciseContent(slide.exercise)}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"popup-content\">\r\n            <h2>{slides[currentSlide].title}</h2>\r\n            {renderSlideContent()}\r\n            <div className=\"navigation-buttons\">\r\n                <button onClick={goToPreviousSlide} disabled={currentSlide === 0}>Previous</button>\r\n                <button onClick={goToNextSlide} disabled={currentSlide === slides.length - 1}>Next</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PopUpContent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}